version: '3.8'

services:
  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: microorganism_backend
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - ./backend/uploads:/app/uploads
      - ./backend/models:/app/models
    environment:
      - FLASK_ENV=development
      - DATABASE_URL=sqlite:///microorganism_detection.db
      - UPLOAD_FOLDER=uploads
      - MODEL_PATH=models/microorganism_yolov7_best.pt
    depends_on:
      - database
    networks:
      - microorganism_network
    restart: unless-stopped

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: microorganism_frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:5000
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend
    networks:
      - microorganism_network
    restart: unless-stopped

  # Database Service (PostgreSQL for production)
  database:
    image: postgres:13
    container_name: microorganism_db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=microorganism_detection
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - microorganism_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: microorganism_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - microorganism_network
    restart: unless-stopped

  # Redis for Caching (Optional)
  redis:
    image: redis:alpine
    container_name: microorganism_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microorganism_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  microorganism_network:
    driver: bridge